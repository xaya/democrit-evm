# GraphQL schema for the Democrit data

# A trade that has (presumably) happened on Democrit.
type Trade @entity (immutable: true) {
  "The ID of a trade is just a sequentially-generated integer for all trades."
  id: String!
  timestamp: BigInt!
  asset: String!
  amount: BigInt!
  sats: BigInt!
  "Price in sats per asset unit."
  price: BigDecimal!
  seller: String!
  buyer: String!
}

# A vault that is currently existing and not yet emptied.  Only vaults
# controlled by the contract are considered.
type Vault @entity (immutable: false) {
  "The vaultId field.  The controller is always the contract's account."
  id: String!
  founder: String!
  asset: String!
  balance: BigInt!

  "The associated SellOrder, if this vault corresponds to one."
  sellOrder: SellOrder
  "The associated TradingPool, if this vault corresponds to one."
  tradingPool: TradingPool
  "The associated SellDeposit, if this vault corresponds to one."
  sellDeposit: SellDeposit
}

# A currently active limit sell order in the book.
type SellOrder @entity (immutable: false) {
  id: String!
  vault: Vault!
  "The owner address when the order was created."
  creator: Bytes!
  "The account name associated to the order/seller."
  seller: String!
  asset: String!
  amount: BigInt!
  totalSats: BigInt!
  price: BigDecimal!
}

# A trading pool that is active.
type TradingPool @entity (immutable: false) {
  id: String!
  vault: Vault!
  operator: String!
  endpoint: String
  asset: String!
  balance: BigInt!
  relFee: BigInt!
}

# A sell deposit that is active.
type SellDeposit @entity (immutable: false) {
  id: String!
  vault: Vault!
  owner: String!
  asset: String!
  balance: BigInt!
}

# A buy limit order that is currently active in the book.
type BuyOrder @entity (immutable: false) {
  id: String!
  "The trading pool used.  It will be set, but might refer to an emptied vault."
  tradingPool: TradingPool
  "The owner address when the order was created."
  creator: Bytes!
  "The account name associated to the order/buyer."
  buyer: String!
  asset: String!
  amount: BigInt!
  totalSats: BigInt!
  price: BigDecimal!
}

# A helper table, which records the next ID to give out to trades.
type AutoId @entity (immutable: false) {
  "A string identifying the sequence (e.g. Trade)."
  id: String!
  next: BigInt!
}
